@mixin fit {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}
@mixin responsive-font($min-size: $font-size-min, $size: $font-size, $limit: $page-limit) {
  $scale-font-enable: global-variable-exists(scale);
  $unitless-min: strip-unit($min-size);
  $unitless-size: strip-unit($size);
  $baseline: strip-unit($phone);
  $font-multiplier: (($unitless-size - $unitless-min) / (strip-unit($limit) - $baseline));
  $font-baseline: ($unitless-min - $font-multiplier * $baseline);
  @if $unitless-min >= $unitless-size {
    @warn 'Responsive font: min-size equal or greater than size';
  }
  font-size: #{$unitless-min}px;
  @if $scale-font-enable == true {
    // stylelint-disable-next-line
    font-size: calc(#{$unitless-min}px * #{var(--scale-font)});
  }
  @media (min-width: $phone) {
    font-size: #{$unitless-min}px;
    @if $scale-font-enable == true {
      // stylelint-disable-next-line
      font-size: calc((#{$font-multiplier} * #{100vw} + (#{$font-baseline}px)) * #{var(--scale-font)});
    } @else {
      // stylelint-disable-next-line
      font-size: calc((#{$font-multiplier} * #{100vw} + (#{$font-baseline}px)));
    }
  }
  @media (min-width: $limit) {
    font-size: #{$unitless-size}px;
    @if $scale-font-enable == true {
      // stylelint-disable-next-line
      font-size: calc(#{$unitless-size}px * #{var(--scale-font)});
    }
  }
}
// Alias for responsive-font mixin
@mixin rf($args...) {
  @include responsive-font($args...);
}
@mixin vertically-responsive($property, $number) {
  #{$property}: $number;
  @if global-variable-exists(scale) {
    @supports (--css: variables) {
      #{$property}: calc(#{$number} * var(--scale-element));
    }
  }
}
@mixin container (){
    width: 100%;
    max-width: 1500px;
    margin: 0 auto;
    padding: 0 5rem;
    /*PHABLET*/
    @media (max-width: $phablet) {
      padding: 0 2rem;
    }
}
@mixin js-only {
  html:not(:global(.no-js)) & {
    @content;
  }
}
@mixin no-js {
  html:not(:global(.js)) & {
    @content;
  }
}
@mixin retina {
  @media only screen and (-webkit-min-device-pixel-ratio: 1.3), only screen and (-o-min-device-pixel-ratio: 13/10), only screen and (min-resolution: 120dpi) {
    @content;
  }
}
// Gsap trans-in defaults
@mixin will-animate($transform: true, $opacity: true) {
  @include js-only {
    @if $opacity == true {
      opacity: 0;
    }
    @if $transform == true {
      will-change: opacity, transform;
    } @else {
      will-change: opacity;
    }
  }
}
